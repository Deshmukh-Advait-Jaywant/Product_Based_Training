"""class node:
    def __init__(self,data=0):
        self.data=data
        self.next=None
obj1=node(1)
obj2=node(2)
obj3=node(3)
print(obj1.data)
print(obj2.data)
print(obj3.data)
obj1.next=obj2
obj2.next=obj3
print(obj1, obj1.data, obj1.next)
print(obj2, obj2.data, obj2.next)
print(obj2, obj3.data, obj3.next)"""

class node:
    def __init__(self,data=0):
        self.data=data
        self.next=None
        
class linkedlist:
    def __init__(self):
        self.head=None
        
    def insertatbeg(self,data):
        if self.head==None:
            self.head=node(data)
        else:
            newnode=node(data)
            newnode.next=self.head
            self.head=newnode
            
    def insertatend(self,data):
        if self.head==None:
            self.head=node(data)
        else:
            last=self.head
            while(last.next):
                last=last.next
            temp=node(data)
            last.next=temp
            
    def insertatpos(self,data):
        if self.head==None:
            self.head=node(data)
        else:
            temp=self.head
            pos=2
            count=1
            while count<pos-1:
                temp=temp.next
                count+=1
            newnode=node(data)
            newnode.next=temp.next
            temp.next=newnode
            
    def delatbeg(self):
        if self.head==None:
            return
        else:
            temp = self.head
            self.head=self.head.next
            temp.next=None
            return temp.data
        
    def delatend(self):
        if self.head==None:
            return
        else:
            temp=self.head
            while(temp.next.next):
                temp=temp.next
            a=temp.next.data
            temp.next=None
            return a
        
    def add_at_middle(self,x):
        if(self.head==None):
            self.head=node(data)
        else:
            fastp=self.head
            slowp=self.head
            while fastp and fastp.next:
                fastp=fastp.next.next
                slowp=slowp.next
            t=self.head
            while t.next!=slowp:
                t=t.next
            temp=node(x)
            t.next=temp
            temp.next=slowp
            
    def del_at_pos(self):
        if self.head==None:
            return
        else:
            before=self.head
            temp=self.head.next
            pos=1
            count=1
            while count<pos-1:
                temp=temp.next
                before=before.next
                count+=1
            if temp.next==None:
                before.next=None
            elif pos==1:
                self.head=self.head.next
                before.next=None
            else:
                before.next=temp.next
                temp.next=None
         
            
            
    def display(self):
        temp=self.head
        while(temp):
            print(temp.data,end=" => ")
            temp=temp.next           

obj=linkedlist()
obj.insertatbeg(2)
obj.insertatbeg(10)
obj.insertatbeg(20)
obj.insertatbeg(30)
obj.display()
print()
obj.del_at_pos()
obj.display()
print()
obj.insertatpos(5)
obj.display()
